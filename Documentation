
Broadcast receiver:
Es un componente que detecta eventos independientes del usuario y que permite que la aplicación responda adecuadamente
ante estas situaciones, algunos ejemplos son, quedarse sin señal de internet, cambio de tipo de conexión a internet,
bateria baja, conexión o desconexión a carga electrica etc.

Es necesario crear una clase que herede de Broadcast Receiver, y sobrecargar el método onReceive, la cual
se ejecutará cada vez que haya un cambio en los eventos de interés en el sistema o dispositivo. Es necesario definir
los filtros de intent para establecer que eventos son de nuestro interés detectar, para esto se crea un objeto tipo
IntentFilter.

Existen dos formas de crear un broadcast receiver:

- Estática: Se definen en el manifest
- Dinámica: Se definen durante le ejecución y permiten la activación o desactivación de la "vigilancia" a dichos eventos.

En este proyecto se utilizan la forma dinámica. Una vez creado un objeto de nuestra clase BroadcastReceiver y un objeto IntentFilter,
estos son registrados usando la función registerReceiver de la clase Activity, la cual comienza con la vigilancia de
acuerdo a los criterios del intent filter y avisando los cambios en el broadcast receiver, en donde se ejecuta la lógica
pertinente cuando los eventos ocurran. De ser necesario se puede eliminar el registro usando la función unregisterReceiver
de la clase Activity, que desactivará la vigilacia a los eventos, cuando yan no sean de nuestro interés, por ejemplo en un onPause


Service:

Componente que permite la ejecución de procesos de larga duracion en segundo plano, estos son independientes de la interfaz
de usuario y se ejecutan incluso cuando la aplicacion esta en background o cuando nos movemos entre actividades. Un servicio es
ejecutad en el hilo principal por lo cual puede ocurrir un ANR, es recomendable ejecutarlo en un segundo hilo de trabajo.
En esta practica se ejecutan dos tipos de servicios:
- El primero es una melodia que suena de fondo durante y que puede ser detenida en cualquier momento, un checkbox nos permite
  decidir si el servicio continua cuando la actividad este en background.
- El segundo es una tarea que bloquea el hilo donde es ejecutado por N segundos. Para esto se genera un hilo de trabajo y se
  realiza la comunicacion mediante un Handler. Dentro del handleMessage del handler se envia una notificacion al usuario, debido
  a que el handler es creado dentro del servicio, la notificacion en enviada incluso cuando la aplicacion esta en segundo plano.
